실습 환경 (택 1)
- Local 환경
    - Oracle XE와 SQL Developer 설치
    - 속도가 빠르며 Query 길이에 제한이 없음
    - 설치가 복잡함
- Cloud 환경
    - https://livesql.oracle.com
    - 설치가 필요 없으며 어디에서나 접속 가능
    - 속도가 느리며 Query 길이에 제한이 있음

DUAL
- 시스템이 제공해 주는 보이지 않는 테이블
- DUMMY라는 컬럼명 한 개에 'X'라는 데이터 하나가 들어있다.
- 예) SELECT 'ABC', 5+4
      FROM DUAL;
    - 출력: +---+------+-----+
           |   |'ABC' | 5+4 | 
           +---+------+-----+
           | 1 | ABC  | 9   | 
           +---+------+-----+

NULL 값
- ORACLE에서 NULL은 가장 큰 값으로 취급 됨 
    - MySQL, Microsoft의 sql server는 반대로 NULL을 가장 작은 값으로 취급
    - -> ORDER BY 컬럼명 ASC 했을 때 NULL값들은 가장 아래에 출력됨

ORACLE 연산자
    - 연산자 우선순위
        1. 괄호 ()
        2. NOT 연산자
        3. 비교 연산자, SQL 연산자
        4. AND
        5. OR
    - 산술 연산자
        - +, -, *, /, %(나머지)
        - number와 date 자료형에 적용 (MySQL에서는 날짜 시간에는 바로 적용 안 됨 )
        - date에 적용 시 날짜 값으로 적용됨 (23/01/29인 값에 +3 하면 23/02/01이 출력됨)
        - Null 값에 산술 연산의 결과는 항상 NULL
    - 비교 연산자
        - >, <, >=, <=, =
        - 모든 자료형에 적용 (문자열 크기는 사전순 - 먼저 나오는 것이 작음)
            - 예) '01' < '02' < '1' < '11' < '2'  
        - !=(같지 않음), <>(같지 않음), 
        - !< (왼쪽 값이 오른쪽 값보다 작지 않음)
        - !> (왼쪽 값이 오른쪽 값보다 크지 않음)
        - NULL에는 비교 연산자 사용 불가
    - 논리 연산자
        - 모든 자료형에 적용
        - NOT, AND, OR
        - 진리표
            - AND (*와 같은 개념)
                - 참 AND 참 = 참
                - 참 AND 거짓 = 거짓
                - 거짓 AND 참 = 거짓
                - 거짓 AND 거짓 = 거짓
                - 참 AND NULL = NULL
                - 거짓 AND NULL = 거짓
                - NULL AND NULL = NULL
            - OR (+와 같은 개념)
                - 참 OR 참 = 참
                - 참 OR 거짓 = 참
                - 거짓 OR 참 = 참
                - 거짓 OR 거짓 = 거짓
                - 참 OR NULL = 참
                - 거짓 OR NULL = NULL
                - NULL OR NULL = NULL
            - NOT
                - 참 = NOT 거짓
                - 거짓 = NOT 참
                - NULL = NOT NULL
    - SQL 연산자
        - 합성(연결) 연산자 - 문자열 결합  
            - || (파이프): str1 || str2
                - 2개 이상 가능: str1 || str2 || str3 || str4 ...
                    - 작동하는 방법: (((str1 || str2) || str3) || str4) ...
                - 예) str = 'a' || 'bcd'
                >> str = 'abcd'
            - CONCAT(str1, str2)
                - 2개만 연결 - 3개 이상 불가능
        - BETWEEN + AND, NOT BETWEEN + AND